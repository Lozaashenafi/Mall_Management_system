// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum MaintenanceRequestStatus {
  Pending
  declined
  approved
}

enum UserRole {
  SuperAdmin
  Admin
  Tenant
}

enum UserStatus {
  Active
  Inactive
}

enum RoomStatus {
  Occupied
  Vacant
  Maintenance
}

enum RentalStatus {
  Active
  Expired
  Terminated
}

enum InvoiceStatus {
  Paid
  Unpaid
  Overdue
}

enum PaymentStatus {
  Confirmed
  Pending
  Failed
}

enum NotificationType {
  Invoice
  PaymentReminder
  RenewalReminder
  SystemAlert
}

enum NotificationSentVia {
  Email
  SMS
  System
}

// 1. Users & Roles
model User {
  userId      Int        @id @default(autoincrement())
  fullName    String
  passwordHash String
  email       String     @unique
  phone       String?
  role        UserRole
  status      UserStatus @default(Active)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  auditLogs   AuditLog[]
  notifications Notification[]
  expenses     Expense[]
  maintenance  Maintenance[]
}

model AuditLog {
  logId     Int       @id @default(autoincrement())
  userId    Int
  action    String
  tableName String
  recordId  Int
  oldValue  Json?
  newValue  Json?
  timestamp DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [userId])
}

// 2. Room Management
model RoomType {
  roomTypeId Int      @id @default(autoincrement())
  typeName   String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rooms      Room[]
}

model Room {
  roomId     Int       @id @default(autoincrement())
  unitNumber String
  floor      Int
  size       Float
  roomTypeId Int
  status     RoomStatus @default(Vacant)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  roomType   RoomType  @relation(fields: [roomTypeId], references: [roomTypeId])
  rental Rental[]
  maintenance Maintenance[]
}

// 3. Tenant Management
model Tenant {
  tenantId      Int        @id @default(autoincrement())
  companyName   String
  contactPerson String
  phone         String
  email         String
  identificationDocument    String?
  status        UserStatus @default(Active)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  rental    Rental[]
  notifications Notification[]
  feedbacks Feedback[]
}

// 4. Agreements
model Rental {
  rentId     Int            @id @default(autoincrement())
  tenantId        Int
  roomId          Int
  versionNumber   Int
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  paymentDueDate  Int // e.g., 5 = 5th of month
  paymentInterval String // Monthly, Quarterly, Yearly
  status          RentalStatus
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tenant          Tenant         @relation(fields: [tenantId], references: [tenantId])
  room            Room           @relation(fields: [roomId], references: [roomId])
  invoices        Invoice[]
  agreementDocuments AgreementDocument[]
  maintenanceRequests MaintenanceRequest[]
}
model AgreementDocument {
  documentId   Int       @id @default(autoincrement())
  rentId       Int
  filePath     String
  uploadedAt   DateTime  @default(now())
  generatedBy  Int?      // userId of admin who generated
  rental       Rental    @relation(fields: [rentId], references: [rentId])
}


// 5. Payments & Invoicing
model Invoice {
  invoiceId     Int           @id @default(autoincrement())
  rentId   Int
  invoiceDate   DateTime
  dueDate       DateTime
  baseRent      Float?
  taxPercentage Float?
  taxAmount     Float?
  totalAmount   Float
  status        InvoiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  rental     Rental     @relation(fields: [rentId], references: [rentId])
  payments      Payment[]
}

model Payment {
  paymentId   Int           @id @default(autoincrement())
  invoiceId   Int
  paymentDate DateTime
  amountPaid  Float
  paymentMethod      String
  lateFee     Float?
  status      PaymentStatus
  invoice     Invoice       @relation(fields: [invoiceId], references: [invoiceId])
}

model Feedback {
  feedbackId   Int      @id @default(autoincrement())
  tenantId     Int
  subject      String
  message      String
  createdAt    DateTime @default(now())
  status       String   @default("New") // Could use enum: New, Reviewed, Resolved
  tenant       Tenant   @relation(fields: [tenantId], references: [tenantId])
}

// 6. Expenses & Maintenance
model Expense {
  expenseId   Int      @id @default(autoincrement())
  category    String
  description String
  amount      Float
  date        DateTime
  recordedBy  Int
  user        User     @relation(fields: [recordedBy], references: [userId])
}

model Maintenance {
  maintenanceId  Int      @id @default(autoincrement())
  roomId         Int
  description    String
  cost           Float
  maintenanceStartDate  DateTime
  maintenanceEndDate    DateTime?
  recordedBy     Int
  room           Room     @relation(fields: [roomId], references: [roomId])
  user           User     @relation(fields: [recordedBy], references: [userId])
}

model MaintenanceRequest {
  requestId      Int       @id @default(autoincrement())
  rentId         Int       // links to the rental (tenant + room)
  description    String
  status         MaintenanceRequestStatus @default(Pending) // enum
  requestDate    DateTime  @default(now())
  completionDate DateTime?
  rental         Rental    @relation(fields: [rentId], references: [rentId])
}

model Notification {
  notificationId Int           @id @default(autoincrement())
  userId         Int? 
  tenantId       Int?
  type           NotificationType
  message        String
  sentVia        NotificationSentVia
  status         String
  createdAt      DateTime      @default(now())
  user           User?         @relation(fields: [userId], references: [userId])
  tenant         Tenant?       @relation(fields: [tenantId], references: [tenantId])
}
