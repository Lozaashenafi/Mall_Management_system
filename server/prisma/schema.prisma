
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MaintenanceRequestStatus {
  Pending
  Declined
  Approved
}

enum MaintenanceStatus {
  Pending
  InProgress
  Completed
}

enum UserRole {
  SuperAdmin
  Admin
  Tenant
}

enum UserStatus {
  Active
  Inactive
}

enum RoomStatus {
  Occupied
  Vacant
  Maintenance
  Inactive
}
enum UtilityType {
  Generator
  Water
  Electricity
  Service
  Other
}

enum RentalStatus {
  Active
  Expired
  Terminated
}

enum InvoiceStatus {
  Paid
  Unpaid
  Overdue
}

enum PaymentStatus {
  Confirmed
  Pending
  Failed
}

enum NotificationType {
  Invoice
  Maintenance
  PaymentReminder
  RenewalReminder
  OverduePayment
  PaymentConfirmation
  UtilityAlert
  SystemAlert
}

enum NotificationSentVia {
  Email
  SMS
  System
}

model User {
  userId      Int        @id @default(autoincrement())
  fullName    String
  profilePicture String?
  passwordHash String
  email       String     @unique
  phone       String?
  role        UserRole
  status      UserStatus @default(Active)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  auditLogs   AuditLog[]
  notifications Notification[]
  utilityExpense UtilityExpense[]
  maintenance  Maintenance[]
  tenants     Tenant[]
}

model AuditLog {
  logId     Int       @id @default(autoincrement())
  userId    Int
  action    String
  tableName String
  recordId  Int
  oldValue  Json?
  newValue  Json?
  timestamp DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [userId])
}

// 2. Room Management
model RoomType {
  roomTypeId Int      @id @default(autoincrement())
  typeName   String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rooms      Room[]
}

model Room {
  roomId        Int        @id @default(autoincrement())
  unitNumber    String
  floor         Int
  size          Float
  roomTypeId    Int
  status        RoomStatus @default(Vacant)
  hasParking    Boolean    @default(false)
  parkingType   String?    // "Unlimited" or "Limited"
  parkingSpaces Int?       // if limited
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  roomType      RoomType   @relation(fields: [roomTypeId], references: [roomTypeId])
  rental        Rental[]
  maintenance   Maintenance[]
  roomFeatures  RoomFeature[]
}
model RoomFeatureType {
  featureTypeId Int     @id @default(autoincrement())
  name          String   @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomFeatures  RoomFeature[]
}

model RoomFeature {
  roomFeatureId Int      @id @default(autoincrement())
  roomId        Int
  featureTypeId Int
  count         Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  room          Room            @relation(fields: [roomId], references: [roomId])
  featureType   RoomFeatureType @relation(fields: [featureTypeId], references: [featureTypeId])
  @@unique([roomId, featureTypeId])
}

model Tenant {
  tenantId      Int        @id @default(autoincrement())
  userId        Int
  companyName   String
  contactPerson String
  phone         String
  email         String
  identificationDocument String?
  tinNumber     String?
  vatNumber     String?
  businessLicense String?
  status        UserStatus @default(Active)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [userId])
  rental        Rental[]
  notifications Notification[]
  feedbacks     Feedback[]
}

model Rental {
  rentId           Int            @id @default(autoincrement())
  tenantId         Int
  roomId           Int
  versionNumber    Int
  startDate        DateTime
  endDate          DateTime
  rentAmount       Float
  paymentDueDate   Int
  paymentInterval  String // e.g., "Monthly", "Quarterly" "Yearly"
  status           RentalStatus
  selfManagedElectricity Boolean @default(false) 
  utilityShare     Float? 
  includeWater     Boolean @default(true) 
  includeElectricity Boolean @default(true)
  includeGenerator Boolean @default(true) 
  includeService   Boolean  @default(true)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  previousRentId   Int?     @unique
  previousRental   Rental?  @relation("RentalRenewal", fields: [previousRentId], references: [rentId])
  nextRental       Rental?  @relation("RentalRenewal")

  tenant           Tenant   @relation(fields: [tenantId], references: [tenantId])
  room             Room     @relation(fields: [roomId], references: [roomId])
  invoices        Invoice[]
  agreementDocuments AgreementDocument[]
  maintenanceRequests MaintenanceRequest[]
  utilityInvoices  UtilityInvoice[]
  terminateRequests TerminateRequest[]
}

model AgreementDocument {
  documentId   Int       @id @default(autoincrement())
  rentId       Int
  filePath     String
  uploadedAt   DateTime  @default(now())
  generatedBy  Int?      
  rental       Rental    @relation(fields: [rentId], references: [rentId])
}
// 5. Payments & Invoicing
model Invoice {
  invoiceId     Int           @id @default(autoincrement())
  rentId        Int
  invoiceDate   DateTime
  dueDate       DateTime
  paperInvoiceNumber String? // ‚Üê Add this (manual invoice no. from paper book)
  baseRent      Float?
  taxPercentage Float?
  taxAmount     Float?
  totalAmount   Float
  status        InvoiceStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  rental        Rental        @relation(fields: [rentId], references: [rentId])
  payments      Payment[]
}

model Feedback {
  feedbackId   Int      @id @default(autoincrement())
  tenantId     Int
  subject      String
  message      String
  createdAt    DateTime @default(now())
  status       String   @default("New") // Could use enum: New, Reviewed, Resolved
  tenant       Tenant   @relation(fields: [tenantId], references: [tenantId])
}

model UtilityExpense {
  expenseId     Int        @id @default(autoincrement())
  type          UtilityType   // Generator | Water | Electricity | Other
  amount        Float
  description   String?
  invoice       String?
  date          DateTime     @default(now())
  createdBy     Int
  user          User         @relation(fields: [createdBy], references: [userId])
}
model Maintenance {
  maintenanceId  Int      @id @default(autoincrement())
  roomId         Int
  description    String
  cost           Float?
  maintenanceStartDate  DateTime
  maintenanceEndDate    DateTime?
  status        MaintenanceStatus @default(InProgress)
  recordedBy     Int?
  room           Room     @relation(fields: [roomId], references: [roomId])
  user           User?    @relation(fields: [recordedBy], references: [userId])

}

model MaintenanceRequest {
  requestId      Int       @id @default(autoincrement())
  rentId         Int       // links to the rental (tenant + room)
  description    String
  status         MaintenanceRequestStatus @default(Pending) // enum
  requestDate    DateTime  @default(now())
  rental         Rental    @relation(fields: [rentId], references: [rentId])
 
}

model Notification {
  notificationId Int           @id @default(autoincrement())
  userId         Int? 
  tenantId       Int?
  type           NotificationType
  message        String
  sentVia        NotificationSentVia
  status         String 
  createdAt      DateTime      @default(now())
  user           User?         @relation(fields: [userId], references: [userId])
  tenant         Tenant?       @relation(fields: [tenantId], references: [tenantId])
}
model UtilityCharge {
  utilityChargeId Int        @id @default(autoincrement())
  type            UtilityType
  month           String      // e.g., "2025-10"
  totalCost       Float
  description     String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  generated       Boolean?     @default(false)
  utilityInvoices UtilityInvoice[]
}
model UtilityInvoice {
  id              Int           @id @default(autoincrement())
  utilityChargeId Int
  rentId          Int
  amount          Float
  paperInvoiceNumber String? 
  status          String        @default("UNPAID")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  utilityCharge   UtilityCharge @relation(fields: [utilityChargeId], references: [utilityChargeId])
  rental          Rental        @relation(fields: [rentId], references: [rentId])
  payments        Payment[]
}

model Payment {
  paymentId               Int            @id @default(autoincrement())
  invoiceId        Int?           
  utilityInvoiceId Int?           // for utility payment
  amount           Float
  paymentDate      DateTime       @default(now())
  method           String?        // Cash, Bank, Mobile, etc.
  reference        String?        // Transaction ID or ref number
  receiptFilePath String?        // Path to uploaded receipt
  endDate DateTime @default(now())     // For rent payments, indicates coverage end date
  status           PaymentStatus  @default(Confirmed)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  invoice          Invoice?        @relation(fields: [invoiceId], references: [invoiceId])
  utilityInvoice   UtilityInvoice? @relation(fields: [utilityInvoiceId], references: [id])
}

model TerminateRequest {
  terminateRequestId Int       @id @default(autoincrement())
  rentId             Int
  reason             String
  requestDate        DateTime  @default(now())
  status             String    @default("Pending") // Pending, Approved, Declined
  effectiveDate      DateTime?
  adminNote          String?
  rental             Rental    @relation(fields: [rentId], references: [rentId])
}
